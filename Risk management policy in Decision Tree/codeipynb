{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd  \n",
    "import numpy as np  \n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Read the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_excel('data_for_tree.xlsx')  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>uid</th>\n",
       "      <th>oil_actv_dt</th>\n",
       "      <th>create_dt</th>\n",
       "      <th>total_oil_cnt</th>\n",
       "      <th>pay_amount_total</th>\n",
       "      <th>class_new</th>\n",
       "      <th>bad_ind</th>\n",
       "      <th>oil_amount</th>\n",
       "      <th>discount_amount</th>\n",
       "      <th>sale_amount</th>\n",
       "      <th>amount</th>\n",
       "      <th>pay_amount</th>\n",
       "      <th>coupon_amount</th>\n",
       "      <th>payment_coupon_amount</th>\n",
       "      <th>channel_code</th>\n",
       "      <th>oil_code</th>\n",
       "      <th>scene</th>\n",
       "      <th>source_app</th>\n",
       "      <th>call_source</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>A8217710</td>\n",
       "      <td>2018-08-19</td>\n",
       "      <td>2018-08-17</td>\n",
       "      <td>275.0</td>\n",
       "      <td>48295495.4</td>\n",
       "      <td>B</td>\n",
       "      <td>0</td>\n",
       "      <td>3308.56</td>\n",
       "      <td>1760081.0</td>\n",
       "      <td>1796001.0</td>\n",
       "      <td>1731081.0</td>\n",
       "      <td>8655401.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>A8217710</td>\n",
       "      <td>2018-08-19</td>\n",
       "      <td>2018-08-16</td>\n",
       "      <td>275.0</td>\n",
       "      <td>48295495.4</td>\n",
       "      <td>B</td>\n",
       "      <td>0</td>\n",
       "      <td>4674.68</td>\n",
       "      <td>2487045.0</td>\n",
       "      <td>2537801.0</td>\n",
       "      <td>2437845.0</td>\n",
       "      <td>12189221.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>A8217710</td>\n",
       "      <td>2018-08-19</td>\n",
       "      <td>2018-08-15</td>\n",
       "      <td>275.0</td>\n",
       "      <td>48295495.4</td>\n",
       "      <td>B</td>\n",
       "      <td>0</td>\n",
       "      <td>1873.06</td>\n",
       "      <td>977845.0</td>\n",
       "      <td>997801.0</td>\n",
       "      <td>961845.0</td>\n",
       "      <td>4809221.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>A8217710</td>\n",
       "      <td>2018-08-19</td>\n",
       "      <td>2018-08-14</td>\n",
       "      <td>275.0</td>\n",
       "      <td>48295495.4</td>\n",
       "      <td>B</td>\n",
       "      <td>0</td>\n",
       "      <td>4837.78</td>\n",
       "      <td>2526441.0</td>\n",
       "      <td>2578001.0</td>\n",
       "      <td>2484441.0</td>\n",
       "      <td>12422201.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>A8217710</td>\n",
       "      <td>2018-08-19</td>\n",
       "      <td>2018-08-13</td>\n",
       "      <td>275.0</td>\n",
       "      <td>48295495.4</td>\n",
       "      <td>B</td>\n",
       "      <td>0</td>\n",
       "      <td>2586.38</td>\n",
       "      <td>1350441.0</td>\n",
       "      <td>1378001.0</td>\n",
       "      <td>1328441.0</td>\n",
       "      <td>6642201.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        uid oil_actv_dt  create_dt  total_oil_cnt  pay_amount_total class_new  \\\n",
       "0  A8217710  2018-08-19 2018-08-17          275.0        48295495.4         B   \n",
       "1  A8217710  2018-08-19 2018-08-16          275.0        48295495.4         B   \n",
       "2  A8217710  2018-08-19 2018-08-15          275.0        48295495.4         B   \n",
       "3  A8217710  2018-08-19 2018-08-14          275.0        48295495.4         B   \n",
       "4  A8217710  2018-08-19 2018-08-13          275.0        48295495.4         B   \n",
       "\n",
       "   bad_ind  oil_amount  discount_amount  sale_amount     amount  pay_amount  \\\n",
       "0        0     3308.56        1760081.0    1796001.0  1731081.0   8655401.0   \n",
       "1        0     4674.68        2487045.0    2537801.0  2437845.0  12189221.0   \n",
       "2        0     1873.06         977845.0     997801.0   961845.0   4809221.0   \n",
       "3        0     4837.78        2526441.0    2578001.0  2484441.0  12422201.0   \n",
       "4        0     2586.38        1350441.0    1378001.0  1328441.0   6642201.0   \n",
       "\n",
       "   coupon_amount  payment_coupon_amount  channel_code  oil_code  scene  \\\n",
       "0            1.0                    1.0             1         3      2   \n",
       "1            1.0                    1.0             1         3      2   \n",
       "2            1.0                    1.0             1         2      2   \n",
       "3            1.0                    1.0             1         2      2   \n",
       "4            1.0                    1.0             1         2      2   \n",
       "\n",
       "   source_app  call_source  \n",
       "0           0            3  \n",
       "1           0            3  \n",
       "2           0            3  \n",
       "3           0            3  \n",
       "4           0            3  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Feature engineering"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Feature classification"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "org_lst = ['uid','create_dt','oil_actv_dt','class_new','bad_ind']\n",
    "# continuous features\n",
    "agg_lst = ['oil_amount','discount_amount','sale_amount','amount','pay_amount','coupon_amount','payment_coupon_amount']\n",
    "# discrete features\n",
    "dstc_lst = ['channel_code','oil_code','scene','source_app','call_source']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>uid</th>\n",
       "      <th>create_dt</th>\n",
       "      <th>oil_actv_dt</th>\n",
       "      <th>class_new</th>\n",
       "      <th>bad_ind</th>\n",
       "      <th>oil_amount</th>\n",
       "      <th>discount_amount</th>\n",
       "      <th>sale_amount</th>\n",
       "      <th>amount</th>\n",
       "      <th>pay_amount</th>\n",
       "      <th>coupon_amount</th>\n",
       "      <th>payment_coupon_amount</th>\n",
       "      <th>channel_code</th>\n",
       "      <th>oil_code</th>\n",
       "      <th>scene</th>\n",
       "      <th>source_app</th>\n",
       "      <th>call_source</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>A8217710</td>\n",
       "      <td>2018-08-17</td>\n",
       "      <td>2018-08-19</td>\n",
       "      <td>B</td>\n",
       "      <td>0</td>\n",
       "      <td>3308.56</td>\n",
       "      <td>1760081.0</td>\n",
       "      <td>1796001.0</td>\n",
       "      <td>1731081.0</td>\n",
       "      <td>8655401.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>A8217710</td>\n",
       "      <td>2018-08-16</td>\n",
       "      <td>2018-08-19</td>\n",
       "      <td>B</td>\n",
       "      <td>0</td>\n",
       "      <td>4674.68</td>\n",
       "      <td>2487045.0</td>\n",
       "      <td>2537801.0</td>\n",
       "      <td>2437845.0</td>\n",
       "      <td>12189221.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>A8217710</td>\n",
       "      <td>2018-08-15</td>\n",
       "      <td>2018-08-19</td>\n",
       "      <td>B</td>\n",
       "      <td>0</td>\n",
       "      <td>1873.06</td>\n",
       "      <td>977845.0</td>\n",
       "      <td>997801.0</td>\n",
       "      <td>961845.0</td>\n",
       "      <td>4809221.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>A8217710</td>\n",
       "      <td>2018-08-14</td>\n",
       "      <td>2018-08-19</td>\n",
       "      <td>B</td>\n",
       "      <td>0</td>\n",
       "      <td>4837.78</td>\n",
       "      <td>2526441.0</td>\n",
       "      <td>2578001.0</td>\n",
       "      <td>2484441.0</td>\n",
       "      <td>12422201.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>A8217710</td>\n",
       "      <td>2018-08-13</td>\n",
       "      <td>2018-08-19</td>\n",
       "      <td>B</td>\n",
       "      <td>0</td>\n",
       "      <td>2586.38</td>\n",
       "      <td>1350441.0</td>\n",
       "      <td>1378001.0</td>\n",
       "      <td>1328441.0</td>\n",
       "      <td>6642201.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        uid  create_dt oil_actv_dt class_new  bad_ind  oil_amount  \\\n",
       "0  A8217710 2018-08-17  2018-08-19         B        0     3308.56   \n",
       "1  A8217710 2018-08-16  2018-08-19         B        0     4674.68   \n",
       "2  A8217710 2018-08-15  2018-08-19         B        0     1873.06   \n",
       "3  A8217710 2018-08-14  2018-08-19         B        0     4837.78   \n",
       "4  A8217710 2018-08-13  2018-08-19         B        0     2586.38   \n",
       "\n",
       "   discount_amount  sale_amount     amount  pay_amount  coupon_amount  \\\n",
       "0        1760081.0    1796001.0  1731081.0   8655401.0            1.0   \n",
       "1        2487045.0    2537801.0  2437845.0  12189221.0            1.0   \n",
       "2         977845.0     997801.0   961845.0   4809221.0            1.0   \n",
       "3        2526441.0    2578001.0  2484441.0  12422201.0            1.0   \n",
       "4        1350441.0    1378001.0  1328441.0   6642201.0            1.0   \n",
       "\n",
       "   payment_coupon_amount  channel_code  oil_code  scene  source_app  \\\n",
       "0                    1.0             1         3      2           0   \n",
       "1                    1.0             1         3      2           0   \n",
       "2                    1.0             1         2      2           0   \n",
       "3                    1.0             1         2      2           0   \n",
       "4                    1.0             1         2      2           0   \n",
       "\n",
       "   call_source  \n",
       "0            3  \n",
       "1            3  \n",
       "2            3  \n",
       "3            3  \n",
       "4            3  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = data[org_lst].copy()\n",
    "df[agg_lst] = data[agg_lst].copy()\n",
    "df[dstc_lst] = data[dstc_lst].copy()\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "base = df[org_lst].copy()\n",
    "# drop duplicates\n",
    "base = base.drop_duplicates(['uid'],keep = 'first')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Feature derivation for continuous variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "gn = pd.DataFrame()\n",
    "for i in agg_lst:  \n",
    "    #calculate the number \n",
    "    tp = pd.DataFrame(df.groupby('uid').apply(lambda df:len(df[i])).reset_index())  \n",
    "    tp.columns = ['uid',i + '_cnt']  \n",
    "    if gn.empty == True:  \n",
    "        gn = tp  \n",
    "    else:  \n",
    "        gn = pd.merge(gn,tp,on = 'uid',how = 'left') \n",
    "    \n",
    "    #calculate the number of feature which is greater than 0求历史特征值大于零的个数  \n",
    "    tp = pd.DataFrame(df.groupby('uid').apply(lambda df:np.where(df[i]>0,1,0).sum()).reset_index())  \n",
    "    tp.columns = ['uid',i + '_num']  \n",
    "    if gn.empty == True:  \n",
    "        gn = tp  \n",
    "    else:  \n",
    "        gn = pd.merge(gn,tp,on = 'uid',how = 'left')  \n",
    "        \n",
    "    #sum the each feature  \n",
    "    tp = pd.DataFrame(df.groupby('uid').apply(lambda df:np.nansum(df[i])).reset_index())  \n",
    "    tp.columns = ['uid',i + '_tot']  \n",
    "    if gn.empty == True:  \n",
    "        gn = tp  \n",
    "    else:  \n",
    "        gn = pd.merge(gn,tp,on = 'uid',how = 'left')  \n",
    "    \n",
    "    #get the maximum number of each feature\n",
    "    tp = pd.DataFrame(df.groupby('uid').apply(lambda df:np.nanmax(df[i])).reset_index())  \n",
    "    tp.columns = ['uid',i + '_max']  \n",
    "    if gn.empty == True:  \n",
    "        gn = tp  \n",
    "    else:  \n",
    "        gn = pd.merge(gn,tp,on = 'uid',how = 'left')  \n",
    "    \n",
    "    #get the minimum number of each feature\n",
    "    tp = pd.DataFrame(df.groupby('uid').apply(lambda df:np.nanmin(df[i])).reset_index())  \n",
    "    tp.columns = ['uid',i + '_min']  \n",
    "    if gn.empty == True:  \n",
    "        gn = tp  \n",
    "    else:  \n",
    "        gn = pd.merge(gn,tp,on = 'uid',how = 'left')  \n",
    "    \n",
    "    # get the variance of each feature \n",
    "    tp = pd.DataFrame(df.groupby('uid').apply(lambda df:np.nanvar(df[i])).reset_index())  \n",
    "    tp.columns = ['uid',i + '_var']  \n",
    "    if gn.empty == True:  \n",
    "        gn = tp  \n",
    "    else:  \n",
    "        gn = pd.merge(gn,tp,on = 'uid',how = 'left') \n",
    "    \n",
    "    #get the range of each feature  \n",
    "    tp = pd.DataFrame(df.groupby('uid').apply(lambda df:np.nanmax(df[i])-np.nanmin(df[i]) ).reset_index())  \n",
    "    tp.columns = ['uid',i + '_ran']  \n",
    "    if gn.empty == True:  \n",
    "        gn = tp  \n",
    "    else:  \n",
    "        gn = pd.merge(gn,tp,on = 'uid',how = 'left')  \n",
    "    \n",
    "    \n",
    "    #get the coefficient of variation (mean/vairation + 0.01 just in case variation get 0)\n",
    "    tp = pd.DataFrame(df.groupby('uid').apply(lambda df:np.nanmean(df[i])/(np.nanvar(df[i])+0.01))).reset_index()  \n",
    "    tp.columns = ['uid',i + '_cva']  \n",
    "    if gn.empty == True:  \n",
    "        gn = tp  \n",
    "    else:  \n",
    "        gn = pd.merge(gn,tp,on = 'uid',how = 'left') "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Feature derivation for discrete variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "gc = pd.DataFrame()  \n",
    "for i in dstc_lst:  \n",
    "    tp = pd.DataFrame(df.groupby('uid').apply(lambda df: len(set(df[i]))).reset_index())  \n",
    "    tp.columns = ['uid',i + '_dstc']  \n",
    "    if gc.empty == True:  \n",
    "        gc = tp  \n",
    "    else:  \n",
    "        gc = pd.merge(gc,tp,on = 'uid',how = 'left')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Aggregration of dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(11307, 66)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fn = base.merge(gn,on='uid').merge(gc,on='uid')  \n",
    "fn.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Modeling - CART Regreesion Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeRegressor\n",
    "X = fn.drop(['uid','oil_actv_dt','create_dt','bad_ind','class_new'],axis = 1)\n",
    "X.fillna(X.mean(), inplace=True)\n",
    "y = fn.bad_ind.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "dtree = DecisionTreeRegressor(max_depth = 2,min_samples_leaf = 500,min_samples_split = 5000)  \n",
    "dtree = dtree.fit(X,y) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pydotplus   \n",
    "from IPython.display import Image  \n",
    "from sklearn.tree import export_graphviz\n",
    "from sklearn.externals.six import StringIO  \n",
    "import os  \n",
    "dot_data = StringIO()  \n",
    "export_graphviz(dtree, out_file=dot_data,  \n",
    "                         feature_names=X.columns,  \n",
    "                         class_names=['bad_ind'],  \n",
    "                         filled=True, rounded=True,  \n",
    "                         special_characters=True)  \n",
    "graph = pydotplus.graph_from_dot_data(dot_data.getvalue())   \n",
    "Image(graph.create_png())  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Labelling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "dff1 = fn.loc[(fn.amount_tot>9614.5)&(fn.coupon_amount_cnt>6)].copy()  \n",
    "dff1['level'] = 'past_A'  \n",
    "dff2 = fn.loc[(fn.amount_tot>9614.5)&(fn.coupon_amount_cnt<=6)].copy()  \n",
    "dff2['level'] = 'past_B'  \n",
    "dff3 = fn.loc[fn.amount_tot<=9614.5].copy()  \n",
    "dff3['level'] = 'past_C'"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
